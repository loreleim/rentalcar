{"version":3,"sources":["pages/home/index.module.scss","database/index.js","pages/home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","store","this","appData","Airports","name","lng","lat","Cars","make","model","Home","searchCars","e","preventDefault","state","searchItem","document","getElementById","value","setState","showError","handleChange","target","console","log","cars","airports","className","style","heroContainer","heroItems","onSubmit","error","id","type","required","autoComplete","onChange","map","key","projectCard","src","image","overlay","projectDetails","medium","Component","App","mainContainer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,UAAY,wBAAwB,qBAAuB,qC,uHCyB1GC,EADD,IAxBZ,aAAe,oBACbC,KAAKC,QAAU,CACbC,SAAU,CACR,CACEC,KAAM,MACNC,IAAK,GACLC,IAAK,IAEP,CACEF,KAAM,MACNC,IAAK,GACLC,IAAK,KAGTC,KAAM,CACJ,CACEC,KAAM,SACNC,MAAO,cC6DFC,E,kDA1Eb,aAAe,IAAD,8BACZ,gBASFC,WAAa,SAACC,GACZA,EAAEC,iBACG,EAAKC,MAAMC,YAGdC,SAASC,eAAe,eAAeC,MAAQ,GAC/C,EAAKC,SAAS,CAAEJ,WAAY,KAC5B,EAAKI,SAAS,CAAEC,WAAW,KAJ3B,EAAKD,SAAS,CAAEC,WAAW,KAbjB,EAqBdC,aAAe,SAACT,GACd,EAAKO,SAAS,CAAEJ,WAAYH,EAAEU,OAAOJ,QACrCK,QAAQC,IAAI,EAAKV,MAAMC,aArBvB,EAAKD,MAAQ,CACXW,KAAM,CAAC,MAAO,UAAW,aACzBC,SAAU,CAAC,MAAO,OAClBX,WAAY,GACZK,WAAW,GAND,E,gEA2BZG,QAAQC,IAAIvB,KAAKa,MAAMW,Q,+BAGf,IAAD,EACsBxB,KAAKa,MAA1BC,EADD,EACCA,WADD,EACaU,KACpB,OACE,6BACE,6BAASE,UAAWC,IAAMC,eACxB,yBAAKF,UAAWC,IAAME,WACpB,2CACA,0BAAMC,SAAU9B,KAAKU,YAClBV,KAAKa,MAAMM,WACV,yBAAKO,UAAWC,IAAMI,OAAtB,4BAEF,2BACEC,GAAG,cACHC,KAAK,OACLC,UAAQ,EACRC,aAAa,MACbC,SAAUpC,KAAKoB,eAEjB,kDACA,4BAAQa,KAAK,UAAb,WAEDnB,EACAf,EAAME,QAAQC,SAASmC,KAAI,SAACnC,GAAD,OAC1B,yBAAKoC,IAAKpC,EAASC,KAAMuB,UAAWC,IAAMY,aACxC,yBAAKC,IAAKtC,EAASuC,QACnB,yBAAKf,UAAWC,IAAMe,UACtB,yBAAKhB,UAAWC,IAAMgB,gBACpB,4BAAKzC,EAASC,MACd,4BAAKD,EAAS0C,oB,GA3DbC,a,gBCQJC,MARf,WACE,OACE,yBAAKpB,UAAWC,IAAMoB,eACpB,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASC,eAAe,SD0HpB,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLT,QAAQS,MAAMA,EAAMgC,a","file":"static/js/main.7fb67561.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"heroContainer\":\"home_heroContainer__2xr85\",\"heroItems\":\"home_heroItems__Xq1Yx\",\"suggestionsContainer\":\"home_suggestionsContainer__3nElT\"};","class Database {\n  constructor() {\n    this.appData = {\n      Airports: [\n        {\n          name: \"HNL\",\n          lng: \"\",\n          lat: \"\",\n        },\n        {\n          name: \"KHL\",\n          lng: \"\",\n          lat: \"\",\n        },\n      ],\n      Cars: [\n        {\n          make: \"toyota\",\n          model: \"corolla\",\n        },\n      ],\n    };\n  }\n}\n\nconst store = new Database();\nexport default store;\n","import React, { Component } from \"react\";\nimport style from \"./index.module.scss\";\nimport store from \"../../database\";\n\nclass Home extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cars: [\"suv\", \"chicken\", \"something\"],\n      airports: [\"HNL\", \"KHL\"],\n      searchItem: \"\",\n      showError: false,\n    };\n  }\n\n  searchCars = (e) => {\n    e.preventDefault();\n    if (!this.state.searchItem) {\n      this.setState({ showError: true });\n    } else {\n      document.getElementById(\"searchInput\").value = \"\";\n      this.setState({ searchItem: \"\" });\n      this.setState({ showError: false });\n    }\n  };\n\n  handleChange = (e) => {\n    this.setState({ searchItem: e.target.value });\n    console.log(this.state.searchItem);\n  };\n\n  renderSuggestions() {\n    console.log(this.state.cars);\n  }\n\n  render() {\n    const { searchItem, cars } = this.state;\n    return (\n      <div>\n        <section className={style.heroContainer}>\n          <div className={style.heroItems}>\n            <h1>Car Rentals</h1>\n            <form onSubmit={this.searchCars}>\n              {this.state.showError && (\n                <div className={style.error}>Do not leave this blank!</div>\n              )}\n              <input\n                id=\"searchInput\"\n                type=\"text\"\n                required\n                autoComplete=\"off\"\n                onChange={this.handleChange}\n              />\n              <label>Pickup Location</label>\n              <button type=\"submit\">Submit</button>\n            </form>\n            {searchItem}\n            {store.appData.Airports.map((Airports) => (\n              <div key={Airports.name} className={style.projectCard}>\n                <img src={Airports.image} />\n                <div className={style.overlay}></div>\n                <div className={style.projectDetails}>\n                  <h4>{Airports.name}</h4>\n                  <h5>{Airports.medium}</h5>\n                </div>\n              </div>\n            ))}\n            {/*<div className={style.suggestionsContainer}>\n              {cars.map((items) => (\n                <li key={items}>{items}</li>\n              ))}\n              </div>*/}\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"./pages/home\";\nimport style from \"./style/index.scss\";\n\nfunction App() {\n  return (\n    <div className={style.mainContainer}>\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}